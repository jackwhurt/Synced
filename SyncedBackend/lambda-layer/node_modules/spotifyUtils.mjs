const AWS = require('aws-sdk');
const axios = require('axios');

// Initialize DynamoDB Document Client
const dynamoDb = new AWS.DynamoDB.DocumentClient();

// Spotify credentials
const clientId = 'your_spotify_client_id';
const clientSecret = 'your_spotify_client_secret';

// Function to retrieve refresh token from DynamoDB
async function getRefreshToken() {
    const params = {
        TableName: 'your_dynamodb_table_name',
        Key: {
            'your_primary_key': 'your_key_value'
        }
    };
    
    try {
        const data = await dynamoDb.get(params).promise();
        return data.Item.refreshToken; // Assuming the field is named refreshToken
    } catch (error) {
        console.error('Error getting refresh token:', error);
        throw error;
    }
}

// Function to refresh Spotify token
async function refreshSpotifyToken(refreshToken) {
    const auth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');
    const postData = new URLSearchParams({ grant_type: 'refresh_token', refresh_token: refreshToken });

    const config = {
        method: 'post',
        url: 'https://accounts.spotify.com/api/token',
        headers: { 
            'Authorization': `Basic ${auth}`,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        data : postData
    };

    try {
        const response = await axios(config);
        return response.data;
    } catch (error) {
        console.error('Error refreshing Spotify token:', error);
        throw error;
    }
}

// Main Lambda handler
exports.handler = async (event) => {
    try {
        const refreshToken = await getRefreshToken();
        const newTokenData = await refreshSpotifyToken(refreshToken);

        // Process the newTokenData as needed
        // Optionally update the token in DynamoDB or elsewhere

        console.log('New token data:', newTokenData);
        return newTokenData;
    } catch (error) {
        console.error('Error in Lambda function:', error);
        throw error;
    }
};
