AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway Stack for Synced
Parameters:
  GetCollaborativePlaylistByIdFunctionArn:
    Type: String
  GetAllCollaborativePlaylistsFunctionArn:
    Type: String
  CreateCollaborativePlaylistFunctionArn:
    Type: String
  UpdateCollaborativePlaylistMetadataFunctionArn:
    Type: String
  AddCollaboratorsFunctionArn:
    Type: String
  DeleteCollaboratorsFunctionArn:
    Type: String
  SyncCollaboratorsFunctionArn:
    Type: String
  AddSongsFunctionArn:
    Type: String
  DeleteSongsFunctionArn:
    Type: String
  GetSpotifyAuthUrlFunctionArn:
    Type: String
  ExchangeSpotifyTokenFunctionArn:
    Type: String
  GetAppleMusicDevTokenFunctionArn:
    Type: String
  UpdateAppleMusicUserTokenFunctionArn:
    Type: String
  UserPoolId: 
    Type: String

Resources:
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Synced
      Description: API for Synced

  CognitoAuthoriser:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "CognitoUserPoolAuthoriser"
      Type: COGNITO_USER_POOLS
      IdentitySource: "method.request.header.Authorization"
      RestApiId: !Ref MyApi
      ProviderARNs: 
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
    
  # Authorisation
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: auth
      RestApiId: !Ref MyApi

  # Authorisation / Spotify
  SpotifyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource 
      PathPart: 'spotify'
      RestApiId: !Ref MyApi

  # Get Spotify Auth Url
  GetSpotifyAuthUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: GET
      ResourceId: !Ref SpotifyResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSpotifyAuthUrlFunctionArn}/invocations"

  GetSpotifyAuthUrlLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetSpotifyAuthUrlFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/auth/spotify" 

  # Exchange Spotify Tokens
  ExchangeSpotifyTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref SpotifyResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExchangeSpotifyTokenFunctionArn}/invocations"
     
  ExchangeSpotifyTokenLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExchangeSpotifyTokenFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/auth/spotify" 

  # Authorisation / Apple Music
  AppleMusicResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource 
      PathPart: 'apple-music'
      RestApiId: !Ref MyApi
  
  # Authorisation / Apple Music / Dev
  AppleMusicDevResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AppleMusicResource 
      PathPart: 'dev'
      RestApiId: !Ref MyApi

  # Get Apple Music Dev Token
  GetAppleMusicDevTokenFunction:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: GET
      ResourceId: !Ref AppleMusicDevResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppleMusicDevTokenFunctionArn}/invocations"

  GetAppleMusicDevTokenLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAppleMusicDevTokenFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/auth/apple-music/dev" 

  # Authorisation / Apple Music / User
  AppleMusicUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AppleMusicResource 
      PathPart: 'user'
      RestApiId: !Ref MyApi

  # Update Apple Music User Token
  UpdateAppleMusicUserTokenFunction:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref AppleMusicUserResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAppleMusicUserTokenFunctionArn}/invocations"

  UpdateAppleMusicUserTokenLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateAppleMusicUserTokenFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/auth/apple-music/user" 

  # Collaborative Playlists
  PlaylistsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: collaborative-playlists
      RestApiId: !Ref MyApi

  # Get all Collaborative Playlists
  GetAllCollaborativePlaylistsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: GET
      ResourceId: !Ref PlaylistsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllCollaborativePlaylistsFunctionArn}/invocations"
     
  GetAllCollaborativePlaylistsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAllCollaborativePlaylistsFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/collaborative-playlists" 

  # Create a Collaborative Playlist
  CreateCollaborativePlaylistMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref PlaylistsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCollaborativePlaylistFunctionArn}/invocations"
     
  CreateCollaborativePlaylistLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateCollaborativePlaylistFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/collaborative-playlists" 

  # Update a Collaborative Playlist's metadata
  UpdateCollaborativePlaylistMetadataMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: PUT
      ResourceId: !Ref PlaylistsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateCollaborativePlaylistMetadataFunctionArn}/invocations"
     
  UpdateCollaborativePlaylistLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateCollaborativePlaylistMetadataFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/PUT/collaborative-playlists" 

  # Collaborative Playlists / Collaborators
  CollaboratorsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PlaylistsResource 
      PathPart: 'collaborators'
      RestApiId: !Ref MyApi

  # Add Collaborators
  AddCollaboratorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref CollaboratorsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCollaboratorsFunctionArn}/invocations"

  AddCollaboratorsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddCollaboratorsFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/collaborative-playlists/collaborators"

  # Delete Collaborators
  DeleteCollaboratorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: DELETE
      ResourceId: !Ref CollaboratorsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCollaboratorsFunctionArn}/invocations"

  DeleteCollaboratorsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteCollaboratorsFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/DELETE/collaborative-playlists/collaborators"

  # Collaborative Playlists / Collaborators / Sync
  SyncResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref CollaboratorsResource 
      PathPart: 'sync'
      RestApiId: !Ref MyApi

  # Sync Collaborators
  SyncCollaboratorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref SyncResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SyncCollaboratorsFunctionArn}/invocations"

  SyncCollaboratorsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SyncCollaboratorsFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/collaborative-playlists/collaborators/sync"

  # Collaborative Playlists / Songs
  SongsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PlaylistsResource 
      PathPart: 'songs'
      RestApiId: !Ref MyApi

  # Add Songs
  AddSongsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref SongsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddSongsFunctionArn}/invocations"
    
  # Delete Songs
  DeleteSongsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: DELETE
      ResourceId: !Ref SongsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteSongsFunctionArn}/invocations"

  # Collaborative Playlists / {id}
  PlaylistIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PlaylistsResource
      PathPart: '{id}'
      RestApiId: !Ref MyApi

  # Get Collaborative Playlist by id
  GetCollaborativePlaylistByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: GET
      ResourceId: !Ref PlaylistIdResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCollaborativePlaylistByIdFunctionArn}/invocations"
     
  GetCollaborativePlaylistByIdLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCollaborativePlaylistByIdFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/collaborative-playlists/{id}"

# Deployment of the API
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "GetAllCollaborativePlaylistsMethod"
    Properties:
      RestApiId: !Ref MyApi

  DevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      Description: Development stage for the API
      RestApiId: !Ref MyApi
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: 'arn:aws:iam::534328153983:role/ApiGatewayCloudWatchLogsRole'