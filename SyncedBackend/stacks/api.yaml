AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway for Synced
Parameters:
  GetCollaborativePlaylistByIdFunctionArn:
    Type: String
  GetAllCollaborativePlaylistsFunctionArn:
    Type: String
  CreateCollaborativePlaylistFunctionArn:
    Type: String
  UserPoolId: 
    Type: String

Resources:
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Synced
      Description: API for Synced

  CognitoAuthoriser:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "CognitoUserPoolAuthoriser"
      Type: COGNITO_USER_POOLS
      IdentitySource: "method.request.header.Authorization"
      RestApiId: !Ref MyApi
      ProviderARNs: 
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"

# Collaborative Playlists
  PlaylistsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: collaborative-playlists  # This is the path part for the new resource
      RestApiId: !Ref MyApi

  GetAllCollaborativePlaylistsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: GET
      ResourceId: !Ref PlaylistsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllCollaborativePlaylistsFunctionArn}/invocations"
     
  GetAllCollaborativePlaylistsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAllCollaborativePlaylistsFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/collaborative-playlists" 

  CreateCollaborativePlaylistMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: POST
      ResourceId: !Ref PlaylistsResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCollaborativePlaylistFunctionArn}/invocations"
     
  CreateCollaborativePlaylistLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateCollaborativePlaylistFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/collaborative-playlists" 

  PlaylistIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PlaylistsResource
      PathPart: '{id}'
      RestApiId: !Ref MyApi

  GetCollaborativePlaylistByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthoriser
      HttpMethod: GET
      ResourceId: !Ref PlaylistIdResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST  # Lambda functions are always invoked with POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCollaborativePlaylistByIdFunctionArn}/invocations"
     
  GetCollaborativePlaylistByIdLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCollaborativePlaylistByIdFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/collaborative-playlists/{id}"

# Deployment of the API
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "GetAllCollaborativePlaylistsMethod"
      - "CreateCollaborativePlaylistMethod"
    Properties:
      RestApiId: !Ref MyApi

  DevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      Description: Development stage for the API
      RestApiId: !Ref MyApi
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: 'arn:aws:iam::534328153983:role/ApiGatewayCloudWatchLogsRole'